# -*- python -*-
# ex: set filetype=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

import datetime
import os

from buildbot.plugins import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

worker_map = {
        'ubuntu-cross1': [
                #'alpha-linux-gnu',
                'arm-linux-gnueabi',
                'arm-linux-gnueabihf',
                'aarch64-linux-gnu',
                #'hppa-linux-gnu',
                #'hppa64-linux-gnu',
                's390x-linux-gnu',
                #'sh4-linux-gnu',
                'sparc64-linux-gnu',
        ],
        'ubuntu-cross2': [
                'mips-linux-gnu',
                #'mips64-linux-gnuabi64',
                'mips64el-linux-gnuabi64',
                'mipsel-linux-gnu',
                #'powerpc-linux-gnu',
                #'powerpc-linux-gnuspe',
                #'powerpc64-linux-gnu',
                'powerpc64le-linux-gnu',
        ],
}

builders = sorted(set([b for blist in worker_map.itervalues() for b in blist]))
workers = worker_map.iterkeys()


####### WORKERS

c['workers'] = [worker.Worker(workername, os.environ["WORKERPASS"], max_builds=1)
                for workername in workers]

c['protocols'] = {'pb': {'port': os.environ["BUILDMASTER_PORT"]}}

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(repourl='git://github.com/D-Programming-GDC/GDC.git',
                                            branch='master',
                                            pollinterval=300,
                                            workdir='gitpoller-workdir'))

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(name="all", branch='master',
                                                        treeStableTimer=60,
                                                        builderNames=builders))
c['schedulers'].append(schedulers.ForceScheduler(name="force",
                                                 builderNames=builders))

####### CONFIGURATORS

c['configurators'] = []
#c['configurators'].append(util.JanitorConfigurator(logHorizon=datetime.timedelta(weeks=8), hour=12, dayOfWeek=6))

####### BUILDERS

factory = util.BuildFactory()
factory.addStep(steps.GitHub(repourl='http://github.com/D-Programming-GDC/GDC.git',
                             mode='incremental', method='fresh', retry=(10, 5)))
factory.addStep(steps.ShellCommand(name='configure', command=['/buildbot/buildci.sh', 'configure']))
factory.addStep(steps.ShellCommand(name='build', command=['/buildbot/buildci.sh', 'build']))
factory.addStep(steps.ShellCommand(name='testsuite', command=['/buildbot/buildci.sh', 'testsuite'],
                                   timeout=3600))
factory.addStep(steps.ShellCommand(name='unittests', command=['/buildbot/buildci.sh', 'unittests']))

c['builders'] = [util.BuilderConfig(name=target,
                                    workername=workername,
                                    factory=factory,
                                    env={'BUILDBOT': 'true',
                                         'BUILDBOT_TARGET': target,
                                         'BUILDBOT_CACHE_DIR': '/buildbot/cache'})
                 for workername, targets in worker_map.iteritems() for target in targets]

####### STATUS TARGETS

c['status'] = []

c['www'] = {
        'port': os.environ["BUILDBOT_WEB_PORT"],
        'plugins': dict(waterfall_view=True, console_view=True, grid_view=True),
}

# Require users to be authenticated to github and part of GDC organization.
if 'GITHUB_OAUTH' in os.environ:
        c['www']['auth'] = util.GitHubAuth(os.environ['BUILDMASTER_CLIENT_ID'],
                                           os.environ['BUILDMASTER_CLIENT_SECRET'],
                                           apiVersion=4, getTeamsMembership=True)
        c['www']['authz'] = util.Authz(
                allowRules=[
                        util.AnyControlEndpointMatcher(role='GDC Admins'),
                        util.ForceBuildEndpointMatcher(role='GDC Admins'),
                        util.StopBuildEndpointMatcher(role='GDC Admins'),
                        util.RebuildBuildEndpointMatcher(role='GDC Admins'),
                        util.EnableSchedulerEndpointMatcher(role='GDC Admins'),
                ],
                roleMatchers=[
                        util.RolesFromGroups(groupPrefix='D-Programming-GDC/'),
                ],
        )


####### PROJECT IDENTITY

c['title'] = "gdc"
c['titleURL'] = "https://gdcproject.org"

c['buildbotURL'] = os.environ["BUILDBOT_WEB_URL"].format(**os.environ)

####### DB URL

c['db'] = {
    'db_url' : os.environ["BUILDBOT_DB_URL"].format(**os.environ),
}
